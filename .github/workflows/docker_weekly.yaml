name: Weekly - Docker image update

on:
  workflow_dispatch:
  # schedule:
  #   - cron: "25 5 * * 4"

env:
  WORKFLOW_ID: docker_update.yaml

jobs:
  trigger:
    name: Trigger update workflow
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - id: version
        name: Get latest released version
        run: |
          set -eo pipefail
          version=$(yq '.version' pubspec.yaml)
          echo "version=$version" >> $GITHUB_OUTPUT
      - name: Trigger Workflow
        uses: actions/github-script@v7
        with:
          script: |
            const workflowId = '${{ env.WORKFLOW_ID }}';
            const ref = 'refs/tags/v${{ steps.version.outputs.version }}';

            const before = new Date(Date.now() - 1000);
            const dispatchResponse = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflowId,
              ref: ref,
              inputs: {
                version: '${{ steps.version.outputs.version }}',
              },
            });
            core.debug(dispatchResponse);
            core.info('Waiting 5 seconds for workflow to start');
            await new Promise(r => setTimeout(r, 5000));
            const after = new Date(Date.now() + 1000);

            const listRunsResponse = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflowId,
              event: 'workflow_dispatch',
              created: `${before.toISOString()}..${after.toISOString()}`,
            })
            core.debug(listRunsResponse);
            const runs = listRunsResponse.data.workflow_runs;

            if (runs.length != 1) {
              throw new Error(`Expected 1 dispatched workflow, but found ${runs.length}`);
            }
            const runId = runs[0].id;

            core.notice(`Dispatched workflow run is: ${runId}`);

            let status = null;
            let conclusion = null;
            do {
              await new Promise(r => setTimeout(r, 60000));

              const statusResponse = await github.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: runId,
              });
              core.debug(statusResponse);

              status = statusResponse.data.status;
              conclusion = statusResponse.data.conclusion;

              core.info(`Waiting for dispatched workflow to complete (status: ${status})`);
            } while (status !== 'completed')

            if (conclusion !== 'success') {
              core.setFailed(`Dispatched update workflow did complete with conclusion: ${conclusion}`);
            }
